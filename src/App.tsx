import { Button, Hint, Link, MiniModal, SidePage, Textarea } from "@skbkontur/react-ui"
import './App.css';
import { FC, useEffect, useState } from "react";
import { Stage, Sprite, Container, Text } from '@pixi/react';
import { KonturColors } from "@skbkontur/colors";
import kisikIcon from './pinpng.com-cat-png-607501.png';
import bagIcon from './pinpng.com-bug-png-1058896.png';
import { Command, moveKisik } from "./extractCommandsAndCount";
import { KisikModel } from './kisik.model';
import { observer } from "mobx-react";
import { BugModel } from './bug.model';
import { runInAction } from "mobx";
import { TransportAirRocketIcon24Regular } from '@skbkontur/icons/icons/TransportAirRocketIcon/TransportAirRocketIcon24Regular'
import { QuestionCircleIcon16Regular } from '@skbkontur/icons/icons/QuestionCircleIcon/QuestionCircleIcon16Regular'
import { HeartIcon64Regular } from '@skbkontur/icons/icons/HeartIcon/HeartIcon64Regular'
import { gameModel } from "./game.model";
import { CopyIcon16Regular } from "@skbkontur/icons/icons/CopyIcon/CopyIcon16Regular";
import { TextStyle } from "pixi.js";
import { BlockIcon32Regular } from "@skbkontur/icons/icons/BlockIcon/BlockIcon32Regular";
import { useMediaQuery } from "@uidotdev/usehooks";

const INITIAL_VALUE = `// –ó–∞–∫–æ–¥–∏—Ä—É–π –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–∏–∫–∞ —Ç—É—Ç
// –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥ –Ω–∞ –ø–µ—Ä–≤—ã–π —Å–ø—Ä–∏–Ω—Ç (—Ö–æ–¥)
–Ω–∞–ø—Ä–∞–≤–æ();
–≤–Ω–∏–∑();
–Ω–∞–ø—Ä–∞–≤–æ();
`;

type Props = {
  kisikModel: KisikModel;
  bugModelFirst: BugModel;
  bugModelSecond: BugModel;
  bugModelThird: BugModel;
}

function getRandomInt(min: number, max: number) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function renderWinModal() {
  return (
    <MiniModal width={500}>
      <MiniModal.Header icon={<HeartIcon64Regular />}>
        –ú—ã –æ—Ç–ª–æ–≤–∏–ª–∏ –≤—Å–µ –±–∞–≥–∏
      </MiniModal.Header>
      <MiniModal.Body>
        <p>
          –ö–æ—Ç –±—ã–ª —Ä–∞–¥ –∏—Å–∫–∞—Ç—å –±–∞–≥–∏ –ø–æ–¥ —Ç–≤–æ–∏–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º!
        </p>
        <p>
          –í –∑–Ω–∞–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –æ–Ω —Ä–∞—Å–∫—Ä—ã–ª —Ç–µ–±–µ —á–∏—Å–ª–æ ‚Äî 99.
        </p>
        <p>
          –ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ —Å–µ–±–µ.
        </p>
        <p>
          –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —á–∏—Å–ª–æ –ø–æ–º–æ–∂–µ—Ç —Å–ø–∞—Å—Ç–∏ –î–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ä—á –ö–æ–Ω—Ç—É—Ä–∞ üòé
        </p>
      </MiniModal.Body>
    </MiniModal>
  )
}

export const App: FC<Props> = observer(({ kisikModel, bugModelFirst, bugModelSecond, bugModelThird }) => {
  const [editorContent, setEditorContent] = useState(INITIAL_VALUE);
  const isSmallDevice = useMediaQuery("only screen and (max-width : 768px)");
  const isMediumDevice = useMediaQuery(
    "only screen and (min-width : 769px) and (max-width : 992px)"
  );

  useEffect(() => {
    bugModelFirst.checkKisikCatchMe();
    bugModelSecond.checkKisikCatchMe();
    bugModelThird.checkKisikCatchMe();
  }, [bugModelFirst, bugModelSecond, bugModelThird, kisikModel, bugModelFirst.currentPosition, bugModelSecond.currentPosition, bugModelThird.currentPosition])

  useEffect(() => {
    const interval = setInterval(() => {
      runInAction(() => {
        bugModelFirst.changeX(getRandomInt(-15, 15))
        bugModelFirst.changeY(getRandomInt(-15, 15))

        bugModelSecond.changeX(getRandomInt(-15, 15))
        bugModelSecond.changeY(getRandomInt(-15, 15))

        bugModelThird.changeX(getRandomInt(-15, 15))
        bugModelThird.changeY(getRandomInt(-15, 15))
      })
    }, 500)

    return () => clearInterval(interval)
  }, [bugModelFirst, bugModelSecond, bugModelThird])

  return (isSmallDevice || isMediumDevice) ? (
      <main className="mobile">
        <BlockIcon32Regular />
        <h3>
          –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–≥—Ä–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö :(
        </h3>
      </main>
    )
  : (
    <>
      <main>
      <Stage width={2000} height={2000} options={{ background: '#D2F3C8' }}>
      <Container position={[500, 500]}>
        <Sprite width={40} height={40} image={kisikIcon} x={kisikModel.currentX} y={kisikModel.currentY} />
        <Sprite width={40} height={40} image={bagIcon} x={bugModelFirst.currentX} y={bugModelFirst.currentY} />
        <Sprite width={40} height={40} image={bagIcon} x={bugModelSecond.currentX} y={bugModelSecond.currentY} />
        <Sprite width={40} height={40} image={bagIcon} x={bugModelThird.currentX} y={bugModelThird.currentY} />
        <Text x={-50} y={-280} text={`–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç ${gameModel.currentScore}`} style={
          new TextStyle({
            align: 'center',
            fontFamily: "Lab Grotesque, -apple-system, BlinkMacSystemFont, Arial, Liberation Sans, Nimbus Sans L, sans-serif",
            fontSize: 24,
            fill: KonturColors.grayscaleText
          })
        } />
      </Container>
    </Stage>
      </main>
      <aside>
      <SidePage width={560}>
        <SidePage.Header>
          –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
        </SidePage.Header>
        <SidePage.Body className="body">
          <p className="rules">
            –¢–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–º–æ—á—å –∫–æ—Ç—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥ –ø–æ–π–º–∞—Ç—å –≤—Å–µ –±–∞–≥–∏ üò∏
          </p>
          <p className="rules">
            –ë–∞–≥–∏ –±—É–¥—É—Ç –≥—É–ª—è—Ç—å –ø–æ —Ä–∞–∑–Ω—ã–º —á–∞—Å—Ç—è–º —Å–∏—Å—Ç–µ–º—ã, –Ω–æ —Ç—ã —Ç–æ—á–Ω–æ —Å–º–æ–∂–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö üòé
          </p>
          <ul className="commands">
            <li className="commands__title">
              –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            </li>
            <li className="commands__command">
              <code>
                –Ω–∞–ª–µ–≤–æ();
              </code>
              <Hint text="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞" pos="right">
                <Button icon={<CopyIcon16Regular color={KonturColors.grayscaleText} />} use="text" onClick={() => window.navigator.clipboard.writeText('–Ω–∞–ª–µ–≤–æ();')} />
              </Hint>
            </li>
            <li className="commands__command">
              <code>
                –Ω–∞–ø—Ä–∞–≤–æ();
              </code>
              <Hint text="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞" pos="right">
                <Button icon={<CopyIcon16Regular color={KonturColors.grayscaleText}  />} use="text" onClick={() => window.navigator.clipboard.writeText('–Ω–∞–ø—Ä–∞–≤–æ();')} />
              </Hint>
            </li>
            <li className="commands__command">
              <code>
                –≤–≤–µ—Ä—Ö();
              </code>
              <Hint text="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞" pos="right">
                <Button icon={<CopyIcon16Regular color={KonturColors.grayscaleText}  />} use="text" onClick={() => window.navigator.clipboard.writeText('–≤–≤–µ—Ä—Ö();')} />
              </Hint>
            </li>
            <li className="commands__command">
              <code>
                –≤–Ω–∏–∑();
              </code>
              <Hint text="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞" pos="right">
                <Button icon={<CopyIcon16Regular color={KonturColors.grayscaleText}  />} use="text" onClick={() => window.navigator.clipboard.writeText('–≤–Ω–∏–∑();')} />
              </Hint>
            </li>
          </ul>
      <Textarea
        autoResize
        value={editorContent}
        width={520}
        onChange={(event) => setEditorContent(event.target.value)}
      />
        </SidePage.Body>
        <SidePage.Footer gap={64}>
          <Button rightIcon={<TransportAirRocketIcon24Regular />} onClick={() => moveKisik(editorContent.split('\n') as Command[], kisikModel)} size="large" use="primary">
            –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥
          </Button>
          <Link rightIcon={<QuestionCircleIcon16Regular />} target="_blank" href="https://kontur.ru/bugbounty" >
            –£–∑–Ω–∞—Ç—å –ø—Ä–æ Bug Bounty –≤ –ö–æ–Ω—Ç—É—Ä–µ
          </Link>
        </SidePage.Footer>
      </SidePage>
    </aside>
    {gameModel.isWinScore && renderWinModal()}
    </>
  )
})
